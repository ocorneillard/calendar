!function(e){function t(r){if(n[r])return n[r].exports;var a=n[r]={i:r,l:!1,exports:{}};return e[r].call(a.exports,a,a.exports,t),a.l=!0,a.exports}var n={};t.m=e,t.c=n,t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:r})},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="",t(t.s=1)}([function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=function(){function e(){r(this,e)}return a(e,[{key:"displayMeeting",value:function(e){var t=document.querySelector(".cm .day"+new Date(e.start).getDate());if(t.parentElement.childElementCount<3){var n=document.createElement("div"),r=document.createElement("span"),a=document.createTextNode(new Date(e.start).getHours()+"-"+new Date(e.end).getHours());r.appendChild(a),r.className="time",n.className="event";var i=document.createTextNode(e.name);n.appendChild(r),n.appendChild(i),t.parentElement.appendChild(n)}else if(3===t.parentElement.childElementCount){var o=document.createElement("div"),u=document.createElement("span");u.className="time",o.className="event";var c=document.createTextNode("See more");o.appendChild(u),o.appendChild(c),t.parentElement.appendChild(o)}}},{key:"displayMeetingHours",value:function(e){var t=new Date(e.start).getHours(),n=new Date(e.end).getHours();n=30===new Date(e.start).getMinutes()?n+.5:n,console.log(t+" "+n);for(var r=!0,a=t;a<n;a+=.5){var i=String(a).replace(/\./g,"-");a%2==0&&(o=".h"+a),o=".h"+i,console.log(o);var o=document.querySelector(o);o.style.background="rgba(189,189,189, 0.2)",o.style.borderLeft="2rem solid rgba(189,189,189, 0.6)",!0===r&&(o.innerText=e.name+" - 4persons",r=!1)}}},{key:"fakeDate",value:function(){for(var e=[],t=0;t<100;t++){var n=["Meeting","reunion","party","grouping","End of week"];n=n[Math.floor(4*Math.random())];var r=Math.floor(8e9*Math.random()+1),a=Math.floor(36e6*Math.random()+1),i=new Date(2018,6,0).getTime()+r,o=(new Date).getTime()+r+a,u={name:n,start:i,end:o};e.push(u)}return e}},{key:"month",value:function(e,t){if(t.parentNode.childNodes.length<=3){var n=document.createElement("div"),r=document.createElement("span"),a=document.createTextNode(new Date(e.start).getHours()+"h");r.appendChild(a),r.className="time",n.className="event";var i=document.createTextNode(e.name);n.appendChild(r),n.appendChild(i),t.parentNode.appendChild(n)}}},{key:"oneMeeting",value:function(){var t=document.querySelector(".info");0!==t.childNodes.length&&(t.innerHTML="");var n=e.createDiv(void 0,"card"),r=e.createDiv(void 0,"card__content"),a=e.createDiv("Meeting with..","card__content-primary");r.appendChild(a),n.appendChild(r),t.appendChild(n)}},{key:"oneMeetingDay",value:function(t){var n=document.querySelector(".info");0!==n.childNodes.length&&(n.innerHTML="");var r="Create a meeting at "+t+"hours.",a=e.createDiv(void 0,"card"),i=e.createDiv(void 0,"card__content"),o=e.createDiv(r,"card__content-primary");i.appendChild(o),a.appendChild(i),n.appendChild(a)}}],[{key:"createDiv",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",t=arguments[1],n=document.createElement("div");return n.className=t,n.innerText=e,n}}]),e}();t.default=i},function(e,t,n){"use strict";n(2),n(3)},function(e,t){},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}var a=n(4),i=r(a),o=n(5),u=r(o),c=n(6),l=r(c),d=n(0),s=r(d),h=n(7),f=r(h),m=new i.default,y=new u.default,v=new l.default,p=new s.default,g=new f.default,b=document.querySelector(".calendar-days"),D=document.querySelector(".calendar-grid"),w=document.querySelector(".previous--month"),C=document.querySelector(".next--month");["Mon","Tue","Wed","Thu","Fri","Sat","Sun"].forEach(function(e){var t=document.createElement("div");t.className="calendar-day",t.innerText=e,b.appendChild(t)}),m.dayOfCalendar();var M=new Date(m.year,m.month,0).getTime(),T=new Date(m.year,m.month+1,0).getTime();v.getMeeting(M,T),w.addEventListener("click",function(e){if(!0===y.isset)y.prevDay();else{m.prevMonth();var t=new Date(m.year,m.month,0).getTime(),n=new Date(m.year,m.month+1,0).getTime();v.getMeeting(t,n)}e.preventDefault()}),C.addEventListener("click",function(e){if(!0===y.isset)y.nextDay();else{m.nextMonth();var t=new Date(m.year,m.month,0).getTime(),n=new Date(m.year,m.month+1,0).getTime();v.getMeeting(t,n)}e.preventDefault()}),D.addEventListener("click",function(e){if("calendar-grid-day cm"===event.target.className){var t=event.target.childNodes[0].innerText;y.year=m.year,y.displayCalendar(t,m.month);var n=new Date(m.year,m.month,t,8).getTime(),r=new Date(m.year,m.month,Number(t)+1,22).getTime();v.getMeeting(n,r),e.preventDefault()}}),y.CalendarGrid.addEventListener("click",function(e){if("hour-event"===event.target.className.split(" ")[0]&&""===event.target.innerText){var t=parseFloat(event.target.className.split(" ")[1].split("h")[1]);p.oneMeetingDay(t)}e.preventDefault()}),document.querySelector(".add-event").addEventListener("click",function(e){g.isset(),e.preventDefault()})},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=function(){function e(t,n){r(this,e),this.month=void 0===t?(new Date).getMonth():t,this.year=void 0===n?(new Date).getFullYear():n,this.calendarGrid=document.querySelector(".calendar-grid"),this.calendarTitle=document.querySelector("h1"),this.months=["January","February","March","April","May","June","July","August","September","October","November","December"]}return a(e,[{key:"dayOfCalendar",value:function(){var t=this,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.month,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.year;this.titleMonth();var a=new Date(r,n,0),i=new Date(r,n+1,0),o=e.getMonday(a).getDate(),u=a.getDate(),c=i.getDate(),l=7-i.getDay(),d=[u,c,l],s=!1;d.forEach(function(e){for(var r=!1===s?o:1;r<=e;r++)t.displayCalendar(r,e!==d[1]||!1===s?"fadeMonth":"cm"),!0===s&&r===(new Date).getDate()&&n===(new Date).getMonth()&&(document.querySelector(".cm .day"+r).style.background="#00E676");s=!0})}},{key:"displayCalendar",value:function(e,t){var n=document.createElement("div");n.className="calendar-grid-day "+t;var r=document.createElement("div");r.className="daytext day"+e,r.innerText=e,n.appendChild(r),this.calendarGrid.appendChild(n)}},{key:"removeCalendar",value:function(){document.querySelector(".calendar-grid").innerHTML=""}},{key:"nextMonth",value:function(){this.month<11?this.month++:(this.year++,this.month=0),this.removeCalendar(),this.dayOfCalendar(this.month,this.year)}},{key:"prevMonth",value:function(){this.month>0?this.month--:(this.year--,this.month=11),this.removeCalendar(),this.dayOfCalendar(this.month,this.year)}},{key:"titleMonth",value:function(){var e=this,t=document.querySelector("h1");setTimeout(function(){t.innerText="",t.innerText=e.months[e.month]+" "+e.year},50)}}],[{key:"getMonday",value:function(e){e=new Date(e);var t=e.getDay(),n=e.getDate()-t+(0==t?-6:1);return new Date(e.setDate(n))}}]),e}();t.default=i},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=function(){function e(){r(this,e),this.main=document.querySelector("main"),this.h1=document.querySelector("h1"),this.months=["January","February","March","April","May","June","July","August","September","October","November","December"],this.CalendarGrid=document.createElement("div"),this.CalendarGrid.className="calendar-grid-hours",this.isset=!1,this.year=(new Date).getFullYear()}return a(e,[{key:"displayCalendar",value:function(t,n){var r=this;this.day=Number(t),this.month=n,setTimeout(function(){r.main.innerHTML=""},50),this.h1.style.animation="100ms grid cubic-bezier(.25, .8, .25, 1)",setTimeout(function(){r.h1.innerText=e.ordinal_suffix_of(Number(t))+" "+r.months[n]+" "+r.year},100);for(var a=8;a<=22;a+=.5){var i=String(a).replace(/\./g,"-"),o=document.createElement("div");o.className="hours";var u=document.createElement("div");u.className="hour";var c=document.createElement("div");c.className="hour-event h"+i,a%1==0&&(u.innerText=a<12?a+"am":a+"pm",c.style.borderTop="1px solid rgba(189,189,189, 0.4)"),o.appendChild(u),o.appendChild(c),this.CalendarGrid.appendChild(o),document.querySelector("body").appendChild(this.CalendarGrid),this.isset=!0}}},{key:"nextDay",value:function(){var e=new Date(this.year,this.month+1,0);e=e.getDate(),this.day===e?(this.day=1,this.month<11?this.month++:(this.year++,this.month=0)):this.day++,this.CalendarGrid.innerHTML="",this.displayCalendar(this.day,this.month)}},{key:"prevDay",value:function(){if(1===this.day){this.month>0?this.month--:(this.year--,this.month=11);var e=new Date(this.year,this.month+1,0);this.day=e.getDate(),console.log(this.day)}else this.day--;this.CalendarGrid.innerHTML="",this.displayCalendar(this.day,this.month)}}],[{key:"ordinal_suffix_of",value:function(e){var t=e%10,n=e%100;return 1==t&&11!=n?e+"st":2==t&&12!=n?e+"nd":3==t&&13!=n?e+"rd":e+"th"}}]),e}();t.default=i},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0),o=function(e){return e&&e.__esModule?e:{default:e}}(i),u=new o.default,c=function(){function e(){r(this,e)}return a(e,[{key:"get",value:function(e){return new Promise(function(t,n){fetch(e).then(function(e){return e.json()}).then(function(e){return t(e)}).catch(function(e){return n(e)})})}},{key:"post",value:function(e,t){return new Promise(function(n,r){fetch(e,{method:"POST",headers:{"Content-type":"application/json"},body:JSON.stringify(t)}).then(function(e){return e.json()}).then(function(e){return n(e)}).catch(function(e){return r(e)})})}},{key:"put",value:function(e,t){return new Promise(function(n,r){fetch(e,{method:"PUT",headers:{"Content-type":"application/json"},body:JSON.stringify(t)}).then(function(e){return e.json()}).then(function(e){return n(e)}).catch(function(e){return r(e)})})}},{key:"delete",value:function(e,t){return new Promise(function(t,n){fetch(e,{method:"DELETE",headers:{"Content-type":"application/json"}}).then(function(e){return e.json()}).then(function(e){return t("Deleted")}).catch(function(e){return n(e)})})}},{key:"getMeeting",value:function(e,t){this.get("https://crud-meetings.azurewebsites.net/api/getAll?start="+e+"&end="+t).then(function(n){t-e==1368e5?n.res.forEach(function(e){u.displayMeetingHours(e)}):n.res.forEach(function(e){u.displayMeeting(e)})}).catch(function(e){return e})}},{key:"addMeeting",value:function(e){this.http.post("https://crud-meetings.azurewebsites.net/api/add?code=JNI0lLs1H53Ug1PeEI33V50P8AVER5cTzaurqm0qI98d0Iulm0sSjw==",e).then(function(e){return e}).catch(function(e){return console.log(e)})}},{key:"updateMeeting",value:function(e,t){this.http.put("https://jsonplaceholder.typicode.com/users/1",t).then(function(e){return console.log(e)}).catch(function(e){return console.log(e)})}},{key:"deleteMeeting",value:function(e){this.http.delete("https://jsonplaceholder.typicode.com/users/1").then(function(e){return console.log(e)}).catch(function(e){return console.log(e)})}}]),e}();t.default=c},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=function(){function e(){r(this,e),this.navbar=document.querySelector(".navbar"),this.header=document.querySelector(".month"),this.btn=document.querySelector(".add-event"),this.login=document.querySelector(".login"),this.log=document.querySelector(".login-login"),this.sign=document.querySelector(".login-signup"),this.form=document.querySelector("form"),this.add=document.querySelector(".add-event")}return a(e,[{key:"isset",value:function(){this.navbar.style.height="30%",this.add.style.transform="rotate(45deg)"}}]),e}();t.default=i}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,